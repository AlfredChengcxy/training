  1 #include "stdio.h"
  2 #include "stdlib.h"
  3 
  4 void a()
  5 {
  6         volatile int i=20000000;
  7         while(i--);
  8 }
  9 
 10 
 11 void c()
 12 {
 13         volatile int i=40000000;
 14         while(i--);
 15 }
 16 
 17 int b()
 18 {
 19         volatile int i=50000000;
 20         while(i--);
 21 
 22         a();
 23         c();
 24         return 0;
 25 }
 26 
 27 int main()
 28 {
 29         printf(" main() function()\n");
 30         b();
 31 }

compile with -pg
$ gcc -pg test.c 
run:
$ ./a.out 

baohua@baohua-VirtualBox:~/develop/training/debug/gprof$ gprof -b a.out gmon.out
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 46.15      0.12     0.12        1   120.00   260.00  b
 34.62      0.21     0.09        1    90.00    90.00  c
 19.23      0.26     0.05        1    50.00    50.00  a


			Call graph


granularity: each sample hit covers 4 byte(s) for 3.85% of 0.26 seconds

index % time    self  children    called     name
                0.12    0.14       1/1           main [2]
[1]    100.0    0.12    0.14       1         b [1]
                0.09    0.00       1/1           c [3]
                0.05    0.00       1/1           a [4]
-----------------------------------------------
                                                 <spontaneous>
[2]    100.0    0.00    0.26                 main [2]
                0.12    0.14       1/1           b [1]
-----------------------------------------------
                0.09    0.00       1/1           b [1]
[3]     34.6    0.09    0.00       1         c [3]
-----------------------------------------------
                0.05    0.00       1/1           b [1]
[4]     19.2    0.05    0.00       1         a [4]
-----------------------------------------------


Index by function name

